import{d as g,u as y,j as l,o as I,B as d,c as m,f as n,t as i,F as w,r as T,h as u,_ as C}from"./index.485d12f6.js";import{u as F}from"./settings.380d0608.js";const B={class:"container"},N={class:"collection-title"},S={class:"collection-name"},U={class:"collection-address"},x={class:"nft-container"},E=["src"],V={class:"commitment"},q=g({__name:"NFTCollectionView",props:{address:{type:String,required:!0},tokenId:{type:String,required:!0}},setup(h){const o=h,f=F(),s=y(),p=l(0),r=l([]),_=l([]),c=l({});function k(e,t){if(c.value?.token?.nfts?.parse){for(const[a,v]of Object.entries(c.value.token.nfts.parse.types))if(a===t)return v}}return I(async()=>{s.query=o.address,await s.search(),await d.fetchAuthChainFromChaingraph({transactionHash:o.tokenId,chaingraphUrl:f.chaingraphUrl,network:"mainnet"}).then(async e=>{const t=e.pop()?.httpsUrl;typeof t<"u"&&await d.addMetadataRegistryFromUri(t).then(()=>{c.value=d.getTokenInfo(o.tokenId)})}),p.value=s.wallet?await s.wallet.getNftTokenBalance(o.tokenId):0,r.value=s.wallet?await s.wallet.getTokenUtxos(o.tokenId):[],console.log("nftUtxos: "+r.value),r.value.forEach(e=>{if(e.token?.tokenId&&e.token?.commitment){console.log("FILTERED NFTS");let t=k(e.token.tokenId,e.token.commitment);t&&(console.log(t),_.value.push({id:e.token.tokenId,commitment:e.token.commitment,nftType:t}))}})}),(e,t)=>(u(),m("div",B,[n("div",N,[n("h3",S,i(c.value?c.value.name:`${o.tokenId.slice(0,4)}...${o.tokenId.slice(-4)}`),1),n("div",U,[n("div",null,"On address: "+i(o.address),1),n("div",null,"Child NFTs "+i(p.value),1)])]),n("div",x,[(u(!0),m(w,null,T(_.value,a=>(u(),m("div",{class:"nft-card",key:a.commitment},[n("img",{src:a.nftType.uris?.icon},null,8,E),n("p",null,i(a.nftType.name),1),n("p",V,"Commitment: "+i(a.commitment),1)]))),128))])]))}});const M=C(q,[["__scopeId","data-v-7d84d918"]]);export{M as default};
